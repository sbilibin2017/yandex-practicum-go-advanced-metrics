// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/yandex-practicum-go-advanced-metrics/internal/services/metric_update.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/yandex-practicum-go-advanced-metrics/internal/types"
)

// MockMetricUpdateSaver is a mock of MetricUpdateSaver interface.
type MockMetricUpdateSaver struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateSaverMockRecorder
}

// MockMetricUpdateSaverMockRecorder is the mock recorder for MockMetricUpdateSaver.
type MockMetricUpdateSaverMockRecorder struct {
	mock *MockMetricUpdateSaver
}

// NewMockMetricUpdateSaver creates a new mock instance.
func NewMockMetricUpdateSaver(ctrl *gomock.Controller) *MockMetricUpdateSaver {
	mock := &MockMetricUpdateSaver{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateSaver) EXPECT() *MockMetricUpdateSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMetricUpdateSaver) Save(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricUpdateSaverMockRecorder) Save(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricUpdateSaver)(nil).Save), ctx)
}

// Send mocks base method.
func (m *MockMetricUpdateSaver) Send(ctx context.Context, metrics types.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMetricUpdateSaverMockRecorder) Send(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMetricUpdateSaver)(nil).Send), ctx, metrics)
}

// MockMetricUpdateFilterer is a mock of MetricUpdateFilterer interface.
type MockMetricUpdateFilterer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricUpdateFiltererMockRecorder
}

// MockMetricUpdateFiltererMockRecorder is the mock recorder for MockMetricUpdateFilterer.
type MockMetricUpdateFiltererMockRecorder struct {
	mock *MockMetricUpdateFilterer
}

// NewMockMetricUpdateFilterer creates a new mock instance.
func NewMockMetricUpdateFilterer(ctrl *gomock.Controller) *MockMetricUpdateFilterer {
	mock := &MockMetricUpdateFilterer{ctrl: ctrl}
	mock.recorder = &MockMetricUpdateFiltererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricUpdateFilterer) EXPECT() *MockMetricUpdateFiltererMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockMetricUpdateFilterer) Filter(ctx context.Context, ids []types.MetricID) (map[types.MetricID]types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", ctx, ids)
	ret0, _ := ret[0].(map[types.MetricID]types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockMetricUpdateFiltererMockRecorder) Filter(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockMetricUpdateFilterer)(nil).Filter), ctx, ids)
}
