// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/yandex-practicum-go-advanced-metrics/internal/handlers/metric_list_html.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/yandex-practicum-go-advanced-metrics/internal/types"
)

// MockMetricHTMLLister is a mock of MetricHTMLLister interface.
type MockMetricHTMLLister struct {
	ctrl     *gomock.Controller
	recorder *MockMetricHTMLListerMockRecorder
}

// MockMetricHTMLListerMockRecorder is the mock recorder for MockMetricHTMLLister.
type MockMetricHTMLListerMockRecorder struct {
	mock *MockMetricHTMLLister
}

// NewMockMetricHTMLLister creates a new mock instance.
func NewMockMetricHTMLLister(ctrl *gomock.Controller) *MockMetricHTMLLister {
	mock := &MockMetricHTMLLister{ctrl: ctrl}
	mock.recorder = &MockMetricHTMLListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricHTMLLister) EXPECT() *MockMetricHTMLListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockMetricHTMLLister) List(ctx context.Context) ([]types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMetricHTMLListerMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetricHTMLLister)(nil).List), ctx)
}
