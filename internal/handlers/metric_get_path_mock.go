// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Go/yandex-practicum-go-advanced-metrics/internal/handlers/metric_get_path.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sbilibin2017/yandex-practicum-go-advanced-metrics/internal/types"
)

// MockMetricPathGetter is a mock of MetricPathGetter interface.
type MockMetricPathGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricPathGetterMockRecorder
}

// MockMetricPathGetterMockRecorder is the mock recorder for MockMetricPathGetter.
type MockMetricPathGetterMockRecorder struct {
	mock *MockMetricPathGetter
}

// NewMockMetricPathGetter creates a new mock instance.
func NewMockMetricPathGetter(ctrl *gomock.Controller) *MockMetricPathGetter {
	mock := &MockMetricPathGetter{ctrl: ctrl}
	mock.recorder = &MockMetricPathGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricPathGetter) EXPECT() *MockMetricPathGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMetricPathGetter) Get(ctx context.Context, id types.MetricID) (*types.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*types.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricPathGetterMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricPathGetter)(nil).Get), ctx, id)
}
